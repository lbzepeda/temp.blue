---
import { VIDEO_URL } from '../../config';

interface ContactMethod {
  label: string;
  value: string;
  link: string;
  description: string;
  realTime?: boolean;
}

const contactMethods: ContactMethod[] = [
  {
    label: 'WhatsApp',
    value: '+505 7723-3432',
    link: 'https://wa.me/50577233432',
    description: 'Respuesta inmediata para tu confort',
    realTime: true,
  },
  {
    label: 'Email',
    value: 'info@tempblue.com.ni',
    link: 'mailto:info@tempblue.com.ni',
    description: 'Cotización detallada a tu medida',
  },
];
---

<section
  id="contact"
  class="relative h-[500px] md:min-h-screen overflow-hidden"
>
  <div class="absolute inset-0 -z-10">
    <div
      class="absolute inset-0 bg-gradient-to-t from-black/40 via-transparent to-black/20"
    >
    </div>
    <video
      id="background-video"
      autoplay
      loop
      muted
      playsinline
      preload="auto"
      class="w-full h-full object-cover scale-105 motion-safe:animate-subtle-zoom"
    >
      <source src={VIDEO_URL} type="video/mp4" />
      <source src={VIDEO_URL} type="video/webm" />
    </video>
  </div>

  <div
    class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-full flex flex-col"
  >
    <div class="flex-1 flex items-center justify-center">
      <div class="max-w-3xl mx-auto text-center space-y-4" data-text="reveal">
        <h2
          class="text-4xl md:text-6xl lg:text-7xl font-medium tracking-tight text-white text-glow"
        >
          Olvídate de trucos<br class="hidden sm:block" /> y vive el confort real
        </h2>
      </div>
    </div>

    <div class="pb-16 relative z-10" data-contact="reveal">
      <div class="flex flex-col md:flex-row max-w-3xl mx-auto gap-3">
        {
          contactMethods.map((method) => (
            <a
              href={method.link}
              target="_blank"
              rel="noopener noreferrer"
              class="group border flex-1 relative overflow-hidden rounded-xl bg-white dark:bg-black"
            >
              <div class="px-5 py-4 flex items-center gap-3">
                <div class="text-[20px]">
                  {method.label === 'WhatsApp' ? (
                    <div class="text-green-400">
                      <svg
                        class="w-5 h-5"
                        viewBox="0 0 24 24"
                        fill="currentColor"
                      >
                        <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413Z" />
                      </svg>
                    </div>
                  ) : (
                    <div class="text-blue-400">
                      <svg
                        class="w-5 h-5"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                        />
                      </svg>
                    </div>
                  )}
                </div>
                <div class="flex-grow">
                  <div class="flex items-center gap-2">
                    <span class="text-sm font-bold text-gray-900 dark:text-gray-100">
                      {method.value}
                    </span>
                    {method.realTime && (
                      <span class="hidden sm:inline-flex items-center text-xs font-bold text-green-700 dark:text-green-400">
                        <span class="mr-1 h-1 w-1 rounded-full bg-green-500 dark:bg-green-400 animate-pulse" />
                        En línea
                      </span>
                    )}
                  </div>
                  <p class="text-xs text-gray-500 dark:text-gray-400">
                    {method.description}
                  </p>
                </div>
                <svg
                  class="w-4 h-4 text-gray-400 dark:text-gray-300 group-hover:translate-x-0.5 transition-transform"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fill-rule="evenodd"
                    d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                    clip-rule="evenodd"
                  />
                </svg>
              </div>
            </a>
          ))
        }
      </div>
    </div>
  </div>
</section>

<style>
  @keyframes subtle-zoom {
    0% {
      transform: scale(1.05);
    }
    100% {
      transform: scale(1.1);
    }
  }

  .animate-subtle-zoom {
    animation: subtle-zoom 30s infinite alternate ease-in-out;
  }
</style>

<script>
  const video = document.getElementById('background-video') as HTMLVideoElement;

  if (video) {
    const loadVideo = () => {
      const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);

      if (isIOS) {
        video
          .play()
          .then(() => {
            video.style.transition = 'opacity 1s ease-in-out';
            video.style.opacity = '1';
          })
          .catch((error) => {
            console.warn('Error reproduciendo video:', error);
            video.style.display = 'none';
          });
      } else {
        video.style.opacity = '0';
        const playPromise = video.play();

        if (playPromise !== undefined) {
          playPromise
            .then(() => {
              video.style.transition = 'opacity 1s ease-in-out';
              video.style.opacity = '1';
            })
            .catch((error) => {
              console.warn('Error reproduciendo video:', error);
              video.style.display = 'none';
            });
        }
      }
    };

    if (document.readyState === 'complete') {
      setTimeout(loadVideo, 100);
    } else {
      window.addEventListener('load', loadVideo);
    }

    let resizeTimeout: ReturnType<typeof setTimeout>;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(loadVideo, 250);
    });
  }
</script>
